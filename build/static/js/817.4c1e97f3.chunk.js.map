{"version":3,"file":"static/js/817.4c1e97f3.chunk.js","mappings":"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","sources":["components/DistanceFaq.tsx","components/DistanceConverter.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, Typography, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nconst DistanceFaq: React.FC = () => {\n  return (\n    <Box sx={{ mt: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        Frequently Asked Questions\n      </Typography>\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>What is the difference between miles and kilometers?</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Miles and kilometers are both units of distance, but they're used in different parts of the world. \n            One mile equals approximately 1.60934 kilometers. Miles are primarily used in the United States and \n            the United Kingdom, while kilometers are used in most other countries as part of the metric system.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>Why do different countries use different units?</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            The difference in units stems from historical and cultural factors. The metric system (using kilometers) \n            was developed during the French Revolution and was designed to be a universal system. The imperial system \n            (using miles) has its roots in ancient Roman measurements and was widely used in the British Empire.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n\n      <Accordion>\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n          <Typography>How accurate is the conversion?</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Our converter uses the exact conversion factor of 1 mile = 1.60934 kilometers, which is the \n            internationally accepted standard. The results are accurate to 5 decimal places, which is more \n            than sufficient for most practical purposes.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n    </Box>\n  );\n};\n\nexport default DistanceFaq;\nexport {}; ","import React, { useState } from 'react';\nimport { Box, Paper, TextField, Typography, Stack } from '@mui/material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport DistanceFaq from './DistanceFaq';\n\nconst DistanceConverter = () => {\n  const [miles, setMiles] = useState<string>('');\n  const [kilometers, setKilometers] = useState<string>('');\n\n  const handleMilesChange = (value: string) => {\n    setMiles(value);\n    if (value === '') {\n      setKilometers('');\n      return;\n    }\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue)) {\n      setKilometers((numValue * 1.60934).toFixed(2));\n    }\n  };\n\n  const handleKilometersChange = (value: string) => {\n    setKilometers(value);\n    if (value === '') {\n      setMiles('');\n      return;\n    }\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue)) {\n      setMiles((numValue / 1.60934).toFixed(2));\n    }\n  };\n\n  // Data for the distance comparison chart\n  const distanceData = [\n    { miles: 0, kilometers: 0 },\n    { miles: 10, kilometers: 16.09 },\n    { miles: 20, kilometers: 32.19 },\n    { miles: 30, kilometers: 48.28 },\n    { miles: 40, kilometers: 64.37 },\n    { miles: 50, kilometers: 80.47 },\n    { miles: 60, kilometers: 96.56 },\n    { miles: 70, kilometers: 112.65 },\n    { miles: 80, kilometers: 128.75 },\n    { miles: 90, kilometers: 144.84 },\n    { miles: 100, kilometers: 160.93 },\n  ];\n\n  return (\n    <Box sx={{ mt: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n        Distance Converter\n      </Typography>\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"text.secondary\" paragraph>\n        Convert between miles and kilometers instantly. Whether you're planning a road trip, following international recipes, or working with global measurements, our converter makes it easy to switch between these common distance units.\n      </Typography>\n\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems=\"center\" justifyContent=\"center\">\n          <TextField\n            label=\"Miles (mi)\"\n            type=\"number\"\n            value={miles}\n            onChange={(e) => handleMilesChange(e.target.value)}\n            fullWidth\n          />\n          <Typography variant=\"h5\">=</Typography>\n          <TextField\n            label=\"Kilometers (km)\"\n            type=\"number\"\n            value={kilometers}\n            onChange={(e) => handleKilometersChange(e.target.value)}\n            fullWidth\n          />\n        </Stack>\n      </Paper>\n\n      <Paper sx={{ p: 3, mb: 4 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Distance Comparison Chart\n        </Typography>\n        <Box sx={{ width: '100%', height: 300 }}>\n          <ResponsiveContainer>\n            <LineChart data={distanceData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"miles\" label={{ value: 'Miles (mi)', position: 'bottom' }} />\n              <YAxis label={{ value: 'Kilometers (km)', angle: -90, position: 'left' }} />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"kilometers\" stroke=\"#8884d8\" />\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Paper>\n\n      <DistanceFaq />\n    </Box>\n  );\n};\n\nexport default DistanceConverter; "],"names":["DistanceFaq","_jsxs","Box","sx","mt","children","_jsx","Typography","variant","gutterBottom","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","DistanceConverter","miles","setMiles","useState","kilometers","setKilometers","component","align","color","paragraph","Paper","p","mb","Stack","direction","xs","sm","spacing","alignItems","justifyContent","TextField","label","type","value","onChange","e","numValue","parseFloat","isNaN","toFixed","handleMilesChange","target","fullWidth","handleKilometersChange","width","height","ResponsiveContainer","LineChart","data","CartesianGrid","strokeDasharray","XAxis","dataKey","position","YAxis","angle","Tooltip","Legend","Line","stroke"],"sourceRoot":""}